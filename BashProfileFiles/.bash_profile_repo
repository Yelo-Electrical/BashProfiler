#
# If .NET Core App
# To only view your unread mail in primary gmail inbox, put this in your search bar: in: category:primary is:unread
# fixgit=git remote -v && git remote set-url origin git@github.com:yourname/yourrepo.git &&
#Let's go!
#Lets
#New commands, baby!
#Nothing, get out of my face!
#SELECT CONCAT('DROP DATABASE `', SCHEMA_NAME, '`;') FROM `information_schema`.`SCHEMATA` WHERE SCHEMA_NAME LIKE 't%';
#Take my money!
#This0is9Nice!
#This_one-is_for_the_boys.
#edit
#thisbisbSO,_Sweet)thankss!
PATH=${PATH}:/usr/local/mysql/bin
	PATH="/Library/Frameworks/Python.framework/Versions/3.8/bin:${PATH}"
	export isDev=1
	export GOPATH="/Users/james/go"
	# export GOOGLE_APPLICATION_CREDENTIALS="/Users/james/go/src/github.com/HappySaila/NRP/gcloud-nsfas-key-file.json"
	export GOOGLE_APPLICATION_CREDENTIALS="/Users/james/go/src/github.com/MSpaceDev/JiraOnTheGO/gcloud-jiraonthego-key.json"
	export PATH
	export BASH_SILENCE_DEPRECATION_WARNING=1
	alias at='alacritty-themes'
	alias aww="yelobe && cd bashscripts && bash genWhatsAppToken.sh"
	alias b="cd .."
	alias be="repo && cd YeloElectrical/BE"
	alias bp="goh && cd BashProfiler"
	alias pp="goh && cd ParallelByEndpoint"
	alias c="clear"
	alias dev="cd ~/../james/Dev"
	alias dls="cd ~/Downloads && e"
	alias edit="subl ~/.bash_profile"
	alias fe="repo && cd YeloElectrical/FE/YeloElectrical"
	alias fresh="source ~/.bash_profile"
	alias ga="git add . && clear && git status"
	alias gb="git branch"
	alias gbd="git branch -D $1"
	alias gcf="git add . && git commit -m 'Force commit'"
	alias gcl="gcloud config list"
	alias gcsp="gcloud config set project $1"
	alias gcp="gcloud projects list"
	alias gcb="gcloud app browse"
	alias gcd="gcloud app deploy"
	alias gca="gcloud auth login"
	alias gens="toscripts be && bash genSchema.sh"
	alias genp="fe && cd bashscripts && bash genProto.sh"
	alias gln="find . -name '*.go' | xargs wc -l"
	alias gmv="go mod vendor"
	alias gop="cd ~/go/"
	alias goh="cd ~/go/src/github.com/HappySaila"
	alias gom="cd ~/go/src/github.com/MSpaceDev"
	alias gp="git push -u origin $1"
	alias gr="git rebase $1"
	alias gs="clear && git status"
	alias gsa="git stash apply"
	alias gst="git stash"
	alias home="repo && cd Grant"
	alias jog="gom && cd JiraOnTheGO"
	alias la="ls -a"
	alias nr="goh && cd NRP"
	alias ns="netstat -ano"
	alias pf="cd PayFast"
	alias repo="cd ~/../james/Dev/Repositories/"
	alias r="clear && source ~/.bash_profile"
	alias run="bash run.sh"
	alias rbp="bp && rm -rf bashprofilefiles/.bash* && cp backup/.bash_profile_deleted bashprofilefiles/ && cp backup/.bash_profile bashprofilefiles/ && cp backup/.bash_profile_repo bashprofilefiles/"
	alias sh="bash"
	alias show="explorer ."
	alias sql="mysql -u root -p -h 127.0.0.1 -P 3306"
	alias temp="cd $TEMP"
	alias vbp="bp && cat bashprofilefiles/.bash_profile"
	alias vbpd="bp && cat bashprofilefiles/.bash_profile_deleted"
	alias vbpr="bp && cat bashprofilefiles/.bash_profile_repo"
	alias vcy="circleci.exe config validate"
	alias aww="yelobe && cd bashscripts && bash genWhatsAppToken.sh"
	alias cal="repo && cd Masks4Africa/Calculator/"
	alias cdsMember="gcloud dataflow jobs run DeleteDatastoreKind --gcs-location gs://dataflow-templates-us-central1/latest/Datastore_to_Datastore_Delete --region us-central1 --staging-location gs://nsfas-referral2.appspot.com/temp --parameters datastoreReadGqlQuery=\"SELECT * FROM Member,datastoreReadProjectId=nsfas-referral2,datastoreDeleteProjectId=nsfas-referral2\""
	alias cdsScore="gcloud dataflow jobs run DeleteDatastoreKind --gcs-location gs://dataflow-templates-us-central1/latest/Datastore_to_Datastore_Delete --region us-central1 --staging-location gs://nsfas-referral2.appspot.com/temp --parameters datastoreReadGqlQuery=\"SELECT * FROM Score,datastoreReadProjectId=nsfas-referral2,datastoreDeleteProjectId=nsfas-referral2\""
	alias cdsTeam="gcloud dataflow jobs run DeleteDatastoreKind --gcs-location gs://dataflow-templates-us-central1/latest/Datastore_to_Datastore_Delete --region us-central1 --staging-location gs://nsfas-referral2.appspot.com/temp --parameters datastoreReadGqlQuery=\"SELECT * FROM Team,datastoreReadProjectId=nsfas-referral2,datastoreDeleteProjectId=nsfas-referral2\""
	alias gr="git rebase $1"
	alias ns="netstat -ano"
	alias rbp="bp && rm -rf bashprofilefiles/.bash* && cp backup/.bash_profile_deleted bashprofilefiles/ && cp backup/.bash_profile bashprofilefiles/ && cp backup/.bash_profile_repo bashprofilefiles/"
	alias sh="bash"
	alias vbp="bp && cat bashprofilefiles/.bash_profile"
	alias vbpd="bp && cat bashprofilefiles/.bash_profile_deleted"
	alias vbpr="bp && cat bashprofilefiles/.bash_profile_repo"
	berge() {
	bp
	cd scripts
	bash run.sh $1
}
PATH=${PATH}:/usr/local/mysql/bin
	PATH="/Library/Frameworks/Python.framework/Versions/3.8/bin:${PATH}"
	export isDev=1
	export GOPATH="/Users/james/go"
	# export GOOGLE_APPLICATION_CREDENTIALS="/Users/james/go/src/github.com/HappySaila/NRP/gcloud-nsfas-key-file.json"
	export GOOGLE_APPLICATION_CREDENTIALS="/Users/james/go/src/github.com/MSpaceDev/JiraOnTheGO/gcloud-jiraonthego-key.json"
	export PATH
	export BASH_SILENCE_DEPRECATION_WARNING=1
	alias at='alacritty-themes'
	alias aww="yelobe && cd bashscripts && bash genWhatsAppToken.sh"
	alias b="cd .."
	alias be="repo && cd YeloElectrical/BE"
	alias bp="goh && cd BashProfiler"
	alias pp="goh && cd ParallelByEndpoint"
	alias c="clear"
	alias dev="cd ~/../james/Dev"
	alias dls="cd ~/Downloads && e"
	alias edit="subl ~/.bash_profile"
	alias fe="repo && cd YeloElectrical/FE/YeloElectrical"
	alias fresh="source ~/.bash_profile"
	alias ga="git add . && clear && git status"
	alias gb="git branch"
	alias gbd="git branch -D $1"
	alias gcf="git add . && git commit -m 'Force commit'"
	alias gcl="gcloud config list"
	alias gcsp="gcloud config set project $1"
	alias gcp="gcloud projects list"
	alias gcb="gcloud app browse"
	alias gcd="gcloud app deploy"
	alias gca="gcloud auth login"
	alias gens="toscripts be && bash genSchema.sh"
	alias genp="fe && cd bashscripts && bash genProto.sh"
	alias gln="find . -name '*.go' | xargs wc -l"
	alias gmv="go mod vendor"
	alias gop="cd ~/go/"
	alias goh="cd ~/go/src/github.com/HappySaila"
	alias gom="cd ~/go/src/github.com/MSpaceDev"
	alias gp="git push -u origin $1"
	alias gr="git rebase $1"
	alias gs="clear && git status"
	alias gsa="git stash apply"
	alias gst="git stash"
	alias home="repo && cd Grant"
	alias jog="gom && cd JiraOnTheGO"
	alias la="ls -a"
	alias nr="goh && cd NRP"
	alias ns="netstat -ano"
	alias pf="cd PayFast"
	alias repo="cd ~/../james/Dev/Repositories/"
	alias r="clear && source ~/.bash_profile"
	alias run="bash run.sh"
	alias rbp="bp && rm -rf bashprofilefiles/.bash* && cp backup/.bash_profile_deleted bashprofilefiles/ && cp backup/.bash_profile bashprofilefiles/ && cp backup/.bash_profile_repo bashprofilefiles/"
	alias sh="bash"
	alias show="explorer ."
	alias sql="mysql -u root -p -h 127.0.0.1 -P 3306"
	alias temp="cd $TEMP"
	alias vbp="bp && cat bashprofilefiles/.bash_profile"
	alias vbpd="bp && cat bashprofilefiles/.bash_profile_deleted"
	alias vbpr="bp && cat bashprofilefiles/.bash_profile_repo"
	alias vcy="circleci.exe config validate"
	mc() {
	cd "$LOCALAPPDATA"
	cd "./Packages/Microsoft.MinecraftUWP_8wekyb3d8bbwe/LocalState/games/com.mojang"
}
abpath(){
	echo "it
	"
}
alias aww="be && cd bashscripts && bash genWhatsAppToken.sh"
alias aww="yelobe && cd bashscripts && bash genWhatsAppToken.sh"
alias b="cd .."
alias be="cd be"
alias be="yelo && cd BE"
alias bp="yelo && cd BashProfiler"
alias bpc="rbp && bp && cd bashprofilefiles && cp ~/.bash_profile ."
alias bs="cd bashscripts"
alias c="clear"
alias cal="repo && cd Masks4Africa/Calculator/"
alias cds="gcloud dataflow jobs run \"BulkDelete\" --gcs-location gs://dataflow-templates-europe-west1/latest/Datastore_to_Datastore_Delete --region europe-west1 --staging-location gs://james-celbux.appspot.com/temp --parameters \"datastoreReadGqlQuery=SELECT *,datastoreReadProjectId=james-celbux,datastoreDeleteProjectId=james-celbux\""
alias cdsMember="gcloud dataflow jobs run DeleteDatastoreKind --gcs-location gs://dataflow-templates-us-central1/latest/Datastore_to_Datastore_Delete --region us-central1 --staging-location gs://nsfas-referral2.appspot.com/temp --parameters datastoreReadGqlQuery=\"SELECT * FROM Member,datastoreReadProjectId=nsfas-referral2,datastoreDeleteProjectId=nsfas-referral2\""
alias cdsScore="gcloud dataflow jobs run DeleteDatastoreKind --gcs-location gs://dataflow-templates-us-central1/latest/Datastore_to_Datastore_Delete --region us-central1 --staging-location gs://nsfas-referral2.appspot.com/temp --parameters datastoreReadGqlQuery=\"SELECT * FROM Score,datastoreReadProjectId=nsfas-referral2,datastoreDeleteProjectId=nsfas-referral2\""
alias cdsTeam="gcloud dataflow jobs run DeleteDatastoreKind --gcs-location gs://dataflow-templates-us-central1/latest/Datastore_to_Datastore_Delete --region us-central1 --staging-location gs://nsfas-referral2.appspot.com/temp --parameters datastoreReadGqlQuery=\"SELECT * FROM Team,datastoreReadProjectId=nsfas-referral2,datastoreDeleteProjectId=nsfas-referral2\""
alias cm="check master"
alias dev="cd ~/Dev"
alias dls="cd ~/Downloads && e"
alias dum="yelo && cd DummyMS"
alias e="explorer ."
alias edit="notepad ~/.bash_profile &"
alias edit="notepad ~/.bash_profile"
alias edit="subl ~/.bash_profile"
alias fe="cd fe"
alias fresh="source ~/.bash_profile"
alias ga="git add . && clear && git status"
alias gb="clear && git branch"
alias gbd="git branch -D $1"
alias gcf="git add . && git commit -m 'Force commit'"
alias gens="toscripts be && bash genSchema.sh"
alias gln="find . -name '*.*' | xargs wc -l"
alias gln="find . -name '*.go' | xargs wc -l"
alias gln="find . -name '*.mcfunction' | xargs wc -l"
alias gmv="go mod vendor"
alias gop="cd c:/go"
alias gopath="dev && cd go"
alias gp="git push -u origin $1"
alias gp="git push origin master"
alias gr="git rebase $1"
alias gs="clear && git status"
alias gsa="git stash apply"
alias gst="git stash"
alias home="cd ~"
alias la="ls -a"
alias la="ls -al"
alias ll="ls -l"
alias mas="repo && cd Masks4Africa"
alias notepad="/c/Program\ Files\ \(x86\)/Notepad++/notepad++.exe"
alias ns="netstat -ano"
alias pf="cd PayFast"
alias r="clear && source ~/.bash_profile"
alias rbp="bp && rm -rf bashprofilefiles/.bash* && cp backup/.bash_profile_deleted bashprofilefiles/ && cp backup/.bash_profile bashprofilefiles/ && cp backup/.bash_profile_repo bashprofilefiles/"
alias repo="cd ~/Dev/Repositories"
alias res="bp && cp -r ~/BergeSafetyVault/.bash_profile ~/. && cp ~/.bash_profile bashprofilefiles/"
alias sh="bash"
alias show="explorer ."
alias sql="mysql -u root -p -h 127.0.0.1 -P 3306"
alias sql="mysql -u root -p"
alias temp="cd $TEMP"
alias vbp="bp && cat bashprofilefiles/.bash_profile"
alias vbpd="bp && cat bashprofilefiles/.bash_profile_deleted"
alias vbpr="bp && cat bashprofilefiles/.bash_profile_repo"
alias vcy="circleci.exe config validate"
alias vcz= Echo "I am new and I am an easter e"
alias vcz= Echo "I am new and I am an easter egg"
alias vcz= Echo "I am new and I am an easter egg, Now I am working and is real egg"
alias yelo="cd ~/Dev/Repositories/YeloElectrical"
berge() {
	bp
	cd scripts
	bash run.sh
}
berge() {
	bp
	cd scripts
	bash run.sh "$1"
}
berge() {
	bp
	cd scripts
	bash run.sh $1
}
bn() {
	git checkout -b $1
}
bp() {
	repo
	cd BashProfiler $1
}
calb() {
	repo && cd Masks4Africa/Calculator/bashscripts
	bash CalBoth.sh $1 $2 $3
}
calb() {
	repo && cd Masks4Africa/StockCalculator/bashscripts
	bash CalBoth.sh $1 $2 $3
}
calc() {
	repo && cd Masks4Africa/StockCalculator/bashscripts
	bash Calculate.sh $1 $2 $3
}
calc() {
	repo && cd Masks4Africa/StockCalculator/bashscripts
	bash Calculate.sh $1 $2 $3 $4
}
cd ../pkg/service/v1
cd ./netcoreapp3.1
cd() {
	dir=$1
	args=$2
	
	clear
	
	echo
	command cd "$dir"
	
	CURRENT=`pwd`
	echo -e "\033[36mCurrently in: \033[35m $CURRENT"
	if [[ $args != '' ]];
	then
	echo -e "\033[31m(Showing hidden files and folders)"
	ls -a
	else
	ls
	fi
	echo
}
cd() {
	dir=$1
	args=$2
	
	clear
	
	echo
	command cd "$dir"
	
	CURRENT=`pwd`
	echo -e "\033[36mCurrently in: \033[35m $CURRENT\033[m"
	if [[ $args != '' ]];
	then
	echo -e "\033[31m(Showing hidden files and folders)\033[m"
	ls -a
	else
	ls
	fi
	echo
}
cd() {
	dir=$1
	args=$2
	
	clear
	
	echo
	command cd $dir
	
	CURRENT=`pwd`
	echo -e "\033[36mCurrently in: \033[35m $CURRENT"
	if [[ $args != '' ]];
	then
	echo -e "\033[31m(Showing hidden files and folders)"
	ls -a
	else
	ls
	fi
	echo
}
cds() {
	cdsMember
	cdsTeam
	cdsScore
}
cel() {
	repo && cd Celbux
}
cgp() {
	c && gcf && gp && echo -e "\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
	echo -e "\n\n\n\n\n\n\n\n\n\n\n\t\t\t Ready ->"
}
chan() {
	cd ~/go/src/Channels
}
check() {
	git checkout $1
}
checknew() {
	git checkout -b $1
}
cover () {
	rm -rf /private/var/folders/fc/8x2clfn57bbgwxzbh1lfvm0r0000gn/T/cover*
	t="/tmp/go-cover.$$.tmp"
	go test -coverprofile=$t $@ && go tool cover -html=$t && unlink $t
}
cyclo {
	cd "C:\Program Files\Cypress\TrackPad"
	./DellDevices.exe
}
cyclo() {
	cd "C:\Program Files\Cypress\TrackPad"
	./DellDevices.exe
}
export USERPROFILE=/d/Users/User/
f() {
	grep -R "$1" *
}
ff () {
	grep -R "$1" $2
}
ff() {
	grep -R "$1" $2
}
gbd() {
	git branch -D $1
}
gbn() {
	git branch $1
}
gc() {
	clear
	git add .
	git commit -m "$1"
}
gc() {
	git commit -m "$1"
}
gencsv() {
	repo
	cd GenerateRawCSV $1
}
genp() {
	toscripts $1
	bash genProto.sh
}
gi() {
	echo "Creating repo" >> README.md
	git init
	git add README.md
	git commit -m "Git initialized"
	git branch -M master
	git remote add origin $1
	git push -u origin master
}
gitinit() {
	name=$1
	repo=$2
	if [[ ${repo} != '' ]];
	then
	mkdir ./temp 2> /dev/null
	mkdir ./${name} 2> /dev/null
	git clone ${repo} ./temp
	shopt -s dotglob
	mv -v ./temp/* ./${name}/
	rm -rf temp
	else
	echo -e "\033[31mUsage: gitinit <folderName> <repo.git>"
	echo
	echo -e "\033[32mgitinit MyApp https://github.com/User/MyApp.git"
	echo
	fi
}
go test
grm() {
	git rm --cached -r "$1"
}
hf() {
	repo
	cd HoneyfrostFinancialSystem $1
}
hfbe() {
	hf
	be
}
hffe() {
	hf
	fe
}
jc() {
	repo
	cd JamesCelbux $1
}
l
land() {
	dir=$1
	eval $dir
	goland64 . &
}
mc() {
	cd "$LOCALAPPDATA"
	cd "./Packages/Microsoft.MinecraftUWP_8wekyb3d8bbwe/LocalState/games/com.mojang"
}
mcj() {
	version=$1
	cd E:
	cd "./Minecraft/1.${version}"
}
merge() {
	checknew "$1Merge"
	git merge --squash "$1"
	git add .
	git commit
	check master
	git merge "$1Merge"
	git branch -D "$1Merge"
}
mergesquash() {
	checknew "$1Merge"
	git merge --squash "$1"
	git add .
	git commit
	check master
	git merge "$1Merge"
	git branch -D "$1Merge"
}
mfa() {
	repo
	cd "Masks for Africa" $1
}
mfa() {
	repo
	cd "Masks4Africa" $1
}
mfabot() {
	mfa
	cd ./LinkedInBot $1
}
mfacal() {
	mfa
	cd ./StockCalculator $1
}
mfares() {
	mfa
	cd ./Resources $1
}
mfaserv() {
	mfa
	cd ./ServiceAgreementGenerator $1
}
o () {
	notepad $1
}
o () {
	notepad $1 &
}
o () {
	subl $1
}
o() {
	subl $1
}
py() {
	if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init -)"
	fi
}
repo() {
	cd ~/Dev/Repositories
}
runc () {
	toscripts $1
	bash runClient.sh
}
runc() {
	toscripts $1
	bash runClient.sh
}
runcgo() {
	toscripts $1
	bash runClient.sh
}
runcvs() {
	todebug $1 -client
	./${foldername}Client.exe
}
runcvs() {
	todebug $1 -client
	dotnet ./${filename}Client.dll
}
runcvs() {
	todebugclient $1
	./${foldername}Client.exe
	runfe () {
	toscripts $1
	bash runFE.sh
}
runfe () {
	toscripts $1
	bash runFE.sh
}
rungo() {
	toscripts $1
	bash run.sh
}
runs () {
	toscripts $1
	bash runServer.sh
}
runs() {
	toscripts $1
	bash runServer.sh
}
runsb() {
	toscripts $1
	bash runSandbox.sh
}
runsbgo() {
	toscripts $1
	bash runSandbox.sh
}
runsgo() {
	toscripts $1
	bash runServer.sh
}
runsgo() {
	toscripts $1
	bash runServer.sh $2
}
runsvs() {
	todebug $1
	./$foldername.exe
}
runsvs() {
	todebug $1
	dotnet ${filename}.dll
}
runsvs() {
	todebug $1
	dotnet ${filename}Server.dll
}
sand() {
	toscripts $1
	bash runSandbox.sh
}
src () {
	toscripts $1
	cd ../pkg/service
}
t () {
	toscripts $1
	cd ../pkg && cd service
	go test -failfast $2
}
t () {
	toscripts $1
	cd ../pkg/service
	go test -failfast
}
t () {
	toscripts $1
	cd ../pkg/service
	go test -failfast $2
}
t () {
	toscripts $1
	sh runTest.sh
}
t () {
	toscripts $1
	sh runTests.sh
}
t () {
	toscripts $6
	cd ../pkg/service
	go test -failfast $2
}
t() {
	toscripts $1
	cd ../pkg/service $1
	go test
}
teest () {
	toscripts $1
	sh runTests.sh
}
todebug() {
	# Evaluate to dir
	dir=$1
	eval $dir
	
	# Get Foldername of solution
	filename=*.sln
	foldername=$(echo "$filename" | cut -f 1 -d '.')
	
	# CD to debug
	cd ./$foldername/bin/Debug
	# If .NET Core App
	cd ./netcoreapp3.1
}
todebug() {
	# Evaluate to dir
	dir=$1
	eval $dir
	# Get Foldername of solution
	filename=*.sln
	foldername=$(echo "$filename" | cut -f 1 -d '.')
	# CD to debug. CD to debug client if args
	if [ -z $2 ]
	then
	cd ./${foldername}/bin/Debug
	else
	cd ./${foldername}Client/bin/Debug
	fi
	# If .NET Core App
	cd ./netcoreapp3.1
}
todebug() {
	# Evaluate to dir
	dir=$1
	eval $dir
	# Get sln names
	fullfile=$(find . -type f -name "*.sln")
	filename=$(basename -- "$fullfile")
	extension="${filename##*.}"
	filename="${filename%.*}"
	# Build solution
	dotnet build .
	# CD to debug. CD to debug client if args
	if [ -z $2 ]
	then
	cd ./${filename}/bin/Debug
	else
	cd ./${filename}Client/bin/Debug
	fi
	# If .NET Core App
	cd ./netcoreapp3.1
}
todebugclient() {
	# Evaluate to dir
	dir=$1
	eval $dir
	
	# Get Foldername of solution
	filename=*.sln
	foldername=$(echo "$filename" | cut -f 1 -d '.')
	
	# CD to debug
	cd ./${foldername}Client/bin/Debug
	toscripts() {
	dir=$1
	eval $dir
	cd bashscripts
}
toscripts() {
	dir=$1
	eval $dir
	cd bashscripts
}
tt () {
	toscripts $1
	cd ../pkg/service
	go test -run $2
}
v() {
	vim $1
}
vs() {
	dir=$1
	eval $dir
	
	file=*.sln
	echo -e "\033[36mOpening solution: \033[35m"
	echo $file
	
	devenv $file &
}
vsc() {
	dir=$1
	eval $dir
	code . &
}
yelo() {
	repo
	cd YeloElectrical $1
}
yelobe() {
	yelo
	be
}
yelopf() {
	yelo
	pf
}
}
